<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32H503CBT6_VL53L8CX_Project1\STM32H503CBT6_VL53L8CX_Project1.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32H503CBT6_VL53L8CX_Project1\STM32H503CBT6_VL53L8CX_Project1.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6180002: Last Updated: Sun Dec  1 16:33:02 2024
<BR><P>
<H3>Maximum Stack Usage =        280 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; MX_TOF_Init &rArr; BSP_COM_Init &rArr; MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCC_GetPCLK3Freq &rArr; HAL_RCC_GetSysClockFreq
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2b]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2b]">ADC1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[5f]">BSP_GetTick</a> from custom_bus.o(.text.BSP_GetTick) referenced 2 times from custom_ranging_sensor.o(.text.CUSTOM_RANGING_SENSOR_Init)
 <LI><a href="#[5c]">BSP_I2C1_DeInit</a> from custom_bus.o(.text.BSP_I2C1_DeInit) referenced 2 times from custom_ranging_sensor.o(.text.CUSTOM_RANGING_SENSOR_Init)
 <LI><a href="#[5b]">BSP_I2C1_Init</a> from custom_bus.o(.text.BSP_I2C1_Init) referenced 2 times from custom_ranging_sensor.o(.text.CUSTOM_RANGING_SENSOR_Init)
 <LI><a href="#[5e]">BSP_I2C1_ReadReg16</a> from custom_bus.o(.text.BSP_I2C1_ReadReg16) referenced 2 times from custom_ranging_sensor.o(.text.CUSTOM_RANGING_SENSOR_Init)
 <LI><a href="#[5d]">BSP_I2C1_WriteReg16</a> from custom_bus.o(.text.BSP_I2C1_WriteReg16) referenced 2 times from custom_ranging_sensor.o(.text.CUSTOM_RANGING_SENSOR_Init)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32h5xx_it.o(.text.BusFault_Handler) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[57]">COMP1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[45]">CRS_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[2c]">DAC1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[50]">DTS_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32h5xx_it.o(.text.DebugMon_Handler) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[12]">EXTI0_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[1c]">EXTI10_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[1d]">EXTI11_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[1e]">EXTI12_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[1f]">EXTI13_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[20]">EXTI14_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[21]">EXTI15_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[13]">EXTI1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[14]">EXTI2_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[15]">EXTI3_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[16]">EXTI4_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[17]">EXTI5_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[18]">EXTI6_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[19]">EXTI7_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[1a]">EXTI8_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[1b]">EXTI9_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[2d]">FDCAN1_IT0_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[2e]">FDCAN1_IT1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[f]">FLASH_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[4e]">FPU_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[22]">GPDMA1_Channel0_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[23]">GPDMA1_Channel1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[24]">GPDMA1_Channel2_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[25]">GPDMA1_Channel3_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[26]">GPDMA1_Channel4_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[27]">GPDMA1_Channel5_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[28]">GPDMA1_Channel6_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[29]">GPDMA1_Channel7_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[46]">GPDMA2_Channel0_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[47]">GPDMA2_Channel1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[48]">GPDMA2_Channel2_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[49]">GPDMA2_Channel3_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[4a]">GPDMA2_Channel4_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[4b]">GPDMA2_Channel5_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[4c]">GPDMA2_Channel6_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[4d]">GPDMA2_Channel7_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[10]">GTZC_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[52]">HASH_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32h5xx_it.o(.text.HardFault_Handler) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[38]">I2C1_ER_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[37]">I2C1_EV_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[3a]">I2C2_ER_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[39]">I2C2_EV_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[54]">I3C1_ER_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[53]">I3C1_EV_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[56]">I3C2_ER_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[55]">I3C2_EV_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[4f]">ICACHE_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[2a]">IWDG_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[42]">LPTIM1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[43]">LPTIM2_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[41]">LPUART1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32h5xx_it.o(.text.MemManage_Handler) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32h5xx_it.o(.text.NMI_Handler) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[b]">PVD_AVD_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from stm32h5xx_it.o(.text.PendSV_Handler) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[e]">RAMCFG_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[11]">RCC_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[51]">RNG_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[c]">RTC_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[3b]">SPI1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[3c]">SPI2_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32h5xx_it.o(.text.SVC_Handler) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32h5xx_it.o(.text.SysTick_Handler) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[59]">SystemInit</a> from system_stm32h5xx.o(.text.SystemInit) referenced from startup_stm32h503xx.o(.text)
 <LI><a href="#[d]">TAMP_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[2f]">TIM1_BRK_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[32]">TIM1_CC_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[31]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[30]">TIM1_UP_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[33]">TIM2_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[34]">TIM3_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[35]">TIM6_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[36]">TIM7_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[3e]">USART1_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[3f]">USART2_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[40]">USART3_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[44]">USB_DRD_FS_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32h5xx_it.o(.text.UsageFault_Handler) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[67]">VL53L8CX_ConfigIT</a> from vl53l8cx.o(.text.VL53L8CX_ConfigIT) referenced from vl53l8cx.o(.data.VL53L8CX_RANGING_SENSOR_Driver)
 <LI><a href="#[65]">VL53L8CX_ConfigProfile</a> from vl53l8cx.o(.text.VL53L8CX_ConfigProfile) referenced from vl53l8cx.o(.data.VL53L8CX_RANGING_SENSOR_Driver)
 <LI><a href="#[66]">VL53L8CX_ConfigROI</a> from vl53l8cx.o(.text.VL53L8CX_ConfigROI) referenced from vl53l8cx.o(.data.VL53L8CX_RANGING_SENSOR_Driver)
 <LI><a href="#[62]">VL53L8CX_DeInit</a> from vl53l8cx.o(.text.VL53L8CX_DeInit) referenced from vl53l8cx.o(.data.VL53L8CX_RANGING_SENSOR_Driver)
 <LI><a href="#[6c]">VL53L8CX_GetAddress</a> from vl53l8cx.o(.text.VL53L8CX_GetAddress) referenced from vl53l8cx.o(.data.VL53L8CX_RANGING_SENSOR_Driver)
 <LI><a href="#[64]">VL53L8CX_GetCapabilities</a> from vl53l8cx.o(.text.VL53L8CX_GetCapabilities) referenced from vl53l8cx.o(.data.VL53L8CX_RANGING_SENSOR_Driver)
 <LI><a href="#[68]">VL53L8CX_GetDistance</a> from vl53l8cx.o(.text.VL53L8CX_GetDistance) referenced from vl53l8cx.o(.data.VL53L8CX_RANGING_SENSOR_Driver)
 <LI><a href="#[6e]">VL53L8CX_GetPowerMode</a> from vl53l8cx.o(.text.VL53L8CX_GetPowerMode) referenced from vl53l8cx.o(.data.VL53L8CX_RANGING_SENSOR_Driver)
 <LI><a href="#[61]">VL53L8CX_Init</a> from vl53l8cx.o(.text.VL53L8CX_Init) referenced from vl53l8cx.o(.data.VL53L8CX_RANGING_SENSOR_Driver)
 <LI><a href="#[63]">VL53L8CX_ReadID</a> from vl53l8cx.o(.text.VL53L8CX_ReadID) referenced from vl53l8cx.o(.data.VL53L8CX_RANGING_SENSOR_Driver)
 <LI><a href="#[6b]">VL53L8CX_SetAddress</a> from vl53l8cx.o(.text.VL53L8CX_SetAddress) referenced from vl53l8cx.o(.data.VL53L8CX_RANGING_SENSOR_Driver)
 <LI><a href="#[6d]">VL53L8CX_SetPowerMode</a> from vl53l8cx.o(.text.VL53L8CX_SetPowerMode) referenced from vl53l8cx.o(.data.VL53L8CX_RANGING_SENSOR_Driver)
 <LI><a href="#[69]">VL53L8CX_Start</a> from vl53l8cx.o(.text.VL53L8CX_Start) referenced from vl53l8cx.o(.data.VL53L8CX_RANGING_SENSOR_Driver)
 <LI><a href="#[6a]">VL53L8CX_Stop</a> from vl53l8cx.o(.text.VL53L8CX_Stop) referenced from vl53l8cx.o(.data.VL53L8CX_RANGING_SENSOR_Driver)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32h503xx.o(.text) referenced from startup_stm32h503xx.o(RESET)
 <LI><a href="#[5a]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32h503xx.o(.text)
 <LI><a href="#[60]">fputc</a> from custom.o(.text.fputc) referenced from printf6.o(i.__0printf$6)
 <LI><a href="#[58]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[5a]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(.text)
</UL>
<P><STRONG><a name="[e6]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[6f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[78]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[e7]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[e8]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[e9]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[ea]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[eb]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>SecureFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
</UL>

<P><STRONG><a name="[2b]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>COMP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DAC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DTS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>GPDMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>GPDMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>GPDMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>GPDMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>GPDMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>GPDMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>GPDMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>GPDMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>GPDMA2_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>GPDMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>GPDMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>GPDMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>GPDMA2_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>GPDMA2_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>GPDMA2_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>GPDMA2_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>GTZC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>HASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>I3C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>I3C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>I3C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>I3C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>ICACHE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>IWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_AVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>RAMCFG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>TAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>USB_DRD_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32h503xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[ec]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[df]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_dci_replace_data
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_get_ranging_data
</UL>

<P><STRONG><a name="[d6]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vl53l8cx_send_xtalk_data
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vl53l8cx_send_offset_data
</UL>

<P><STRONG><a name="[d8]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vl53l8cx_send_offset_data
</UL>

<P><STRONG><a name="[ed]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[f0]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vl53l8cx_send_xtalk_data
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vl53l8cx_send_offset_data
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_Init
</UL>

<P><STRONG><a name="[77]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[f1]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[e4]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[f2]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[f3]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[f4]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>BSP_COM_Init</STRONG> (Thumb, 196 bytes, Stack size 184 bytes, custom.o(.text.BSP_COM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = BSP_COM_Init &rArr; MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCC_GetPCLK3Freq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TOF_Init
</UL>

<P><STRONG><a name="[5f]"></a>BSP_GetTick</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, custom_bus.o(.text.BSP_GetTick))
<BR><BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_ranging_sensor.o(.text.CUSTOM_RANGING_SENSOR_Init)
</UL>
<P><STRONG><a name="[5c]"></a>BSP_I2C1_DeInit</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, custom_bus.o(.text.BSP_I2C1_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = BSP_I2C1_DeInit &rArr; HAL_GPIO_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_ranging_sensor.o(.text.CUSTOM_RANGING_SENSOR_Init)
</UL>
<P><STRONG><a name="[5b]"></a>BSP_I2C1_Init</STRONG> (Thumb, 242 bytes, Stack size 200 bytes, custom_bus.o(.text.BSP_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = BSP_I2C1_Init &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetState
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_ranging_sensor.o(.text.CUSTOM_RANGING_SENSOR_Init)
</UL>
<P><STRONG><a name="[5e]"></a>BSP_I2C1_ReadReg16</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, custom_bus.o(.text.BSP_I2C1_ReadReg16))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BSP_I2C1_ReadReg16 &rArr; HAL_I2C_Mem_Read &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_ranging_sensor.o(.text.CUSTOM_RANGING_SENSOR_Init)
</UL>
<P><STRONG><a name="[5d]"></a>BSP_I2C1_WriteReg16</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, custom_bus.o(.text.BSP_I2C1_WriteReg16))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = BSP_I2C1_WriteReg16 &rArr; HAL_I2C_Mem_Write &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetError
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> custom_ranging_sensor.o(.text.CUSTOM_RANGING_SENSOR_Init)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h5xx_it.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[b9]"></a>CUSTOM_RANGING_SENSOR_ConfigProfile</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, custom_ranging_sensor.o(.text.CUSTOM_RANGING_SENSOR_ConfigProfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CUSTOM_RANGING_SENSOR_ConfigProfile
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TOF_Process
</UL>

<P><STRONG><a name="[b8]"></a>CUSTOM_RANGING_SENSOR_GetCapabilities</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, custom_ranging_sensor.o(.text.CUSTOM_RANGING_SENSOR_GetCapabilities))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CUSTOM_RANGING_SENSOR_GetCapabilities
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TOF_Process
</UL>

<P><STRONG><a name="[bc]"></a>CUSTOM_RANGING_SENSOR_GetDistance</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, custom_ranging_sensor.o(.text.CUSTOM_RANGING_SENSOR_GetDistance))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CUSTOM_RANGING_SENSOR_GetDistance
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TOF_Process
</UL>

<P><STRONG><a name="[87]"></a>CUSTOM_RANGING_SENSOR_Init</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, custom_ranging_sensor.o(.text.CUSTOM_RANGING_SENSOR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = CUSTOM_RANGING_SENSOR_Init &rArr; VL53L8CX_ReadID &rArr; VL53L8CX_WrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_ReadID
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_RegisterBusIO
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TOF_Init
</UL>

<P><STRONG><a name="[b7]"></a>CUSTOM_RANGING_SENSOR_ReadID</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, custom_ranging_sensor.o(.text.CUSTOM_RANGING_SENSOR_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CUSTOM_RANGING_SENSOR_ReadID
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TOF_Process
</UL>

<P><STRONG><a name="[ba]"></a>CUSTOM_RANGING_SENSOR_Start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, custom_ranging_sensor.o(.text.CUSTOM_RANGING_SENSOR_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CUSTOM_RANGING_SENSOR_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TOF_Process
</UL>

<P><STRONG><a name="[bb]"></a>CUSTOM_RANGING_SENSOR_Stop</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, custom_ranging_sensor.o(.text.CUSTOM_RANGING_SENSOR_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CUSTOM_RANGING_SENSOR_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TOF_Process
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h5xx_it.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[b1]"></a>Error_Handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ICACHE_Init
</UL>

<P><STRONG><a name="[89]"></a>HAL_Delay</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, stm32h5xx_hal.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUSTOM_RANGING_SENSOR_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TOF_Process
</UL>

<P><STRONG><a name="[7f]"></a>HAL_GPIO_DeInit</STRONG> (Thumb, 250 bytes, Stack size 44 bytes, stm32h5xx_hal_gpio.o(.text.HAL_GPIO_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_DeInit
</UL>

<P><STRONG><a name="[7c]"></a>HAL_GPIO_Init</STRONG> (Thumb, 410 bytes, Stack size 44 bytes, stm32h5xx_hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[88]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h5xx_hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUSTOM_RANGING_SENSOR_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[7e]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32h5xx_hal.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GetTick
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[83]"></a>HAL_I2CEx_ConfigAnalogFilter</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, stm32h5xx_hal_i2c_ex.o(.text.HAL_I2CEx_ConfigAnalogFilter))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_Init
</UL>

<P><STRONG><a name="[ae]"></a>HAL_I2CEx_ConfigDigitalFilter</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, stm32h5xx_hal_i2c_ex.o(.text.HAL_I2CEx_ConfigDigitalFilter))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[80]"></a>HAL_I2C_DeInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32h5xx_hal_i2c.o(.text.HAL_I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_I2C_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_DeInit
</UL>

<P><STRONG><a name="[85]"></a>HAL_I2C_GetError</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h5xx_hal_i2c.o(.text.HAL_I2C_GetError))
<BR><BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_ReadReg16
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_WriteReg16
</UL>

<P><STRONG><a name="[81]"></a>HAL_I2C_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32h5xx_hal_i2c.o(.text.HAL_I2C_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_Init
</UL>

<P><STRONG><a name="[8c]"></a>HAL_I2C_Init</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32h5xx_hal_i2c.o(.text.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[84]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 576 bytes, Stack size 40 bytes, stm32h5xx_hal_i2c.o(.text.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_ReadReg16
</UL>

<P><STRONG><a name="[86]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 568 bytes, Stack size 40 bytes, stm32h5xx_hal_i2c.o(.text.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_WriteReg16
</UL>

<P><STRONG><a name="[8b]"></a>HAL_I2C_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h5xx_hal_i2c.o(.text.HAL_I2C_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>

<P><STRONG><a name="[8d]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h5xx_hal_i2c.o(.text.HAL_I2C_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[b0]"></a>HAL_ICACHE_ConfigAssociativityMode</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h5xx_hal_icache.o(.text.HAL_ICACHE_ConfigAssociativityMode))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ICACHE_Init
</UL>

<P><STRONG><a name="[b2]"></a>HAL_ICACHE_Enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32h5xx_hal_icache.o(.text.HAL_ICACHE_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ICACHE_Init
</UL>

<P><STRONG><a name="[c1]"></a>HAL_IncTick</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32h5xx_hal.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[92]"></a>HAL_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, stm32h5xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[96]"></a>HAL_InitTick</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, stm32h5xx_hal.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_GetCLKSourceConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[97]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h5xx_hal_msp.o(.text.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[9a]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32h5xx_hal_cortex.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[93]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32h5xx_hal_cortex.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[a0]"></a>HAL_RCCEx_GetPLL1ClockFreq</STRONG> (Thumb, 436 bytes, Stack size 8 bytes, stm32h5xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPLL1ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCCEx_GetPLL1ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[9e]"></a>HAL_RCCEx_GetPLL2ClockFreq</STRONG> (Thumb, 436 bytes, Stack size 8 bytes, stm32h5xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPLL2ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCCEx_GetPLL2ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[9b]"></a>HAL_RCCEx_GetPeriphCLKFreq</STRONG> (Thumb, 1920 bytes, Stack size 24 bytes, stm32h5xx_hal_rcc_ex.o(.text.HAL_RCCEx_GetPeriphCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCC_GetPCLK3Freq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL1ClockFreq
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK3Freq
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[7b]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 1732 bytes, Stack size 32 bytes, stm32h5xx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_Init
</UL>

<P><STRONG><a name="[a3]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 622 bytes, Stack size 32 bytes, stm32h5xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[9d]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32h5xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetHCLKFreq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[9f]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32h5xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetPCLK1Freq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[a1]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32h5xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetPCLK2Freq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[9c]"></a>HAL_RCC_GetPCLK3Freq</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, stm32h5xx_hal_rcc.o(.text.HAL_RCC_GetPCLK3Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetPCLK3Freq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[94]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 300 bytes, Stack size 8 bytes, stm32h5xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK3Freq
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[a4]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1610 bytes, Stack size 32 bytes, stm32h5xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[95]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 142 bytes, Stack size 0 bytes, stm32h5xx_hal_cortex.o(.text.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[99]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32h5xx_hal_cortex.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[98]"></a>HAL_SYSTICK_GetCLKSourceConfig</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, stm32h5xx_hal_cortex.o(.text.HAL_SYSTICK_GetCLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[c0]"></a>HAL_UARTEx_DisableFifoMode</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32h5xx_hal_uart_ex.o(.text.HAL_UARTEx_DisableFifoMode))
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[bf]"></a>HAL_UARTEx_SetRxFifoThreshold</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, stm32h5xx_hal_uart_ex.o(.text.HAL_UARTEx_SetRxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UARTEx_SetRxFifoThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[be]"></a>HAL_UARTEx_SetTxFifoThreshold</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, stm32h5xx_hal_uart_ex.o(.text.HAL_UARTEx_SetTxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UARTEx_SetTxFifoThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[a5]"></a>HAL_UART_Init</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, stm32h5xx_hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCC_GetPCLK3Freq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[a6]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h5xx_hal_uart.o(.text.HAL_UART_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[aa]"></a>HAL_UART_Receive</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, stm32h5xx_hal_uart.o(.text.HAL_UART_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TOF_Process
</UL>

<P><STRONG><a name="[ac]"></a>HAL_UART_Transmit</STRONG> (Thumb, 416 bytes, Stack size 24 bytes, stm32h5xx_hal_uart.o(.text.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h5xx_it.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>MX_GPIO_Init</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, gpio.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[82]"></a>MX_I2C1_Init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, custom_bus.o(.text.MX_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MX_I2C1_Init &rArr; HAL_I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigDigitalFilter
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2CEx_ConfigAnalogFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_I2C1_Init
</UL>

<P><STRONG><a name="[af]"></a>MX_ICACHE_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, icache.o(.text.MX_ICACHE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MX_ICACHE_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ICACHE_Enable
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ICACHE_ConfigAssociativityMode
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>MX_TOF_Init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app_tof.o(.text.MX_TOF_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = MX_TOF_Init &rArr; BSP_COM_Init &rArr; MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCC_GetPCLK3Freq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUSTOM_RANGING_SENSOR_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>MX_TOF_Process</STRONG> (Thumb, 1380 bytes, Stack size 80 bytes, app_tof.o(.text.MX_TOF_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MX_TOF_Process &rArr; HAL_UART_Receive &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUSTOM_RANGING_SENSOR_Stop
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUSTOM_RANGING_SENSOR_Start
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUSTOM_RANGING_SENSOR_GetDistance
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUSTOM_RANGING_SENSOR_ConfigProfile
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUSTOM_RANGING_SENSOR_GetCapabilities
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUSTOM_RANGING_SENSOR_ReadID
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, custom.o(.text.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCC_GetPCLK3Freq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableFifoMode
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Init
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h5xx_it.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h5xx_it.o(.text.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h5xx_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h5xx_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32h5xx_it.o(.text.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[c2]"></a>SystemClock_Config</STRONG> (Thumb, 198 bytes, Stack size 120 bytes, main.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>SystemInit</STRONG> (Thumb, 168 bytes, Stack size 0 bytes, system_stm32h5xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(.text)
</UL>
<P><STRONG><a name="[a7]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, stm32h5xx_hal_uart.o(.text.UART_AdvFeatureConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_AdvFeatureConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[a9]"></a>UART_CheckIdleState</STRONG> (Thumb, 366 bytes, Stack size 24 bytes, stm32h5xx_hal_uart.o(.text.UART_CheckIdleState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART_CheckIdleState &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[a8]"></a>UART_SetConfig</STRONG> (Thumb, 430 bytes, Stack size 16 bytes, stm32h5xx_hal_uart.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_SetConfig &rArr; HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCC_GetPCLK3Freq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[ab]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 848 bytes, Stack size 24 bytes, stm32h5xx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32h5xx_it.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32h503xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>VL53L8CX_ConfigIT</STRONG> (Thumb, 398 bytes, Stack size 40 bytes, vl53l8cx.o(.text.VL53L8CX_ConfigIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = VL53L8CX_ConfigIT &rArr; vl53l8cx_set_detection_thresholds_enable &rArr; vl53l8cx_dci_replace_data &rArr; vl53l8cx_dci_write_data &rArr; VL53L8CX_SwapBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_set_detection_thresholds
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_set_detection_thresholds_enable
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_get_resolution
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vl53l8cx.o(.data.VL53L8CX_RANGING_SENSOR_Driver)
</UL>
<P><STRONG><a name="[65]"></a>VL53L8CX_ConfigProfile</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, vl53l8cx.o(.text.VL53L8CX_ConfigProfile))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = VL53L8CX_ConfigProfile &rArr; vl53l8cx_set_resolution &rArr; _vl53l8cx_send_offset_data &rArr; VL53L8CX_SwapBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_set_ranging_mode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_set_integration_time_ms
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_set_ranging_frequency_hz
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_set_resolution
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vl53l8cx.o(.data.VL53L8CX_RANGING_SENSOR_Driver)
</UL>
<P><STRONG><a name="[66]"></a>VL53L8CX_ConfigROI</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, vl53l8cx.o(.text.VL53L8CX_ConfigROI))
<BR>[Address Reference Count : 1]<UL><LI> vl53l8cx.o(.data.VL53L8CX_RANGING_SENSOR_Driver)
</UL>
<P><STRONG><a name="[62]"></a>VL53L8CX_DeInit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, vl53l8cx.o(.text.VL53L8CX_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L8CX_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vl53l8cx.o(.data.VL53L8CX_RANGING_SENSOR_Driver)
</UL>
<P><STRONG><a name="[6c]"></a>VL53L8CX_GetAddress</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, vl53l8cx.o(.text.VL53L8CX_GetAddress))
<BR>[Address Reference Count : 1]<UL><LI> vl53l8cx.o(.data.VL53L8CX_RANGING_SENSOR_Driver)
</UL>
<P><STRONG><a name="[64]"></a>VL53L8CX_GetCapabilities</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, vl53l8cx.o(.text.VL53L8CX_GetCapabilities))
<BR>[Address Reference Count : 1]<UL><LI> vl53l8cx.o(.data.VL53L8CX_RANGING_SENSOR_Driver)
</UL>
<P><STRONG><a name="[68]"></a>VL53L8CX_GetDistance</STRONG> (Thumb, 628 bytes, Stack size 56 bytes, vl53l8cx.o(.text.VL53L8CX_GetDistance))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = VL53L8CX_GetDistance &rArr; vl53l8cx_get_ranging_data &rArr; VL53L8CX_SwapBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_get_ranging_data
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_check_data_ready
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_get_resolution
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vl53l8cx.o(.data.VL53L8CX_RANGING_SENSOR_Driver)
</UL>
<P><STRONG><a name="[6e]"></a>VL53L8CX_GetPowerMode</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, vl53l8cx.o(.text.VL53L8CX_GetPowerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VL53L8CX_GetPowerMode &rArr; vl53l8cx_get_power_mode &rArr; VL53L8CX_WrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_get_power_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vl53l8cx.o(.data.VL53L8CX_RANGING_SENSOR_Driver)
</UL>
<P><STRONG><a name="[61]"></a>VL53L8CX_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, vl53l8cx.o(.text.VL53L8CX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = VL53L8CX_Init &rArr; vl53l8cx_init &rArr; _vl53l8cx_send_offset_data &rArr; VL53L8CX_SwapBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vl53l8cx.o(.data.VL53L8CX_RANGING_SENSOR_Driver)
</UL>
<P><STRONG><a name="[d0]"></a>VL53L8CX_RdByte</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, platform.o(.text.VL53L8CX_RdByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L8CX_RdByte
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_stop_ranging
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_set_power_mode
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_get_power_mode
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_ReadID
</UL>

<P><STRONG><a name="[da]"></a>VL53L8CX_RdMulti</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, platform.o(.text.VL53L8CX_RdMulti))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L8CX_RdMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_get_ranging_data
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_check_data_ready
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_stop_ranging
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_dci_read_data
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_start_ranging
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_set_power_mode
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_dci_write_data
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vl53l8cx_send_xtalk_data
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vl53l8cx_send_offset_data
</UL>

<P><STRONG><a name="[63]"></a>VL53L8CX_ReadID</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, vl53l8cx.o(.text.VL53L8CX_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = VL53L8CX_ReadID &rArr; VL53L8CX_WrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_RdByte
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_WrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUSTOM_RANGING_SENSOR_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vl53l8cx.o(.data.VL53L8CX_RANGING_SENSOR_Driver)
</UL>
<P><STRONG><a name="[8a]"></a>VL53L8CX_RegisterBusIO</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, vl53l8cx.o(.text.VL53L8CX_RegisterBusIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L8CX_RegisterBusIO
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CUSTOM_RANGING_SENSOR_Init
</UL>

<P><STRONG><a name="[6b]"></a>VL53L8CX_SetAddress</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, vl53l8cx.o(.text.VL53L8CX_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = VL53L8CX_SetAddress &rArr; vl53l8cx_set_i2c_address &rArr; VL53L8CX_WrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_set_i2c_address
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vl53l8cx.o(.data.VL53L8CX_RANGING_SENSOR_Driver)
</UL>
<P><STRONG><a name="[6d]"></a>VL53L8CX_SetPowerMode</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, vl53l8cx.o(.text.VL53L8CX_SetPowerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = VL53L8CX_SetPowerMode &rArr; vl53l8cx_set_power_mode &rArr; vl53l8cx_init &rArr; _vl53l8cx_send_offset_data &rArr; VL53L8CX_SwapBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_set_power_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vl53l8cx.o(.data.VL53L8CX_RANGING_SENSOR_Driver)
</UL>
<P><STRONG><a name="[69]"></a>VL53L8CX_Start</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, vl53l8cx.o(.text.VL53L8CX_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = VL53L8CX_Start &rArr; vl53l8cx_start_ranging &rArr; vl53l8cx_dci_write_data &rArr; VL53L8CX_SwapBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_start_ranging
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vl53l8cx.o(.data.VL53L8CX_RANGING_SENSOR_Driver)
</UL>
<P><STRONG><a name="[6a]"></a>VL53L8CX_Stop</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, vl53l8cx.o(.text.VL53L8CX_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = VL53L8CX_Stop &rArr; vl53l8cx_stop_ranging &rArr; VL53L8CX_WaitMs
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_stop_ranging
</UL>
<BR>[Address Reference Count : 1]<UL><LI> vl53l8cx.o(.data.VL53L8CX_RANGING_SENSOR_Driver)
</UL>
<P><STRONG><a name="[d7]"></a>VL53L8CX_SwapBuffer</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, platform.o(.text.VL53L8CX_SwapBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53L8CX_SwapBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_get_ranging_data
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_dci_read_data
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_dci_write_data
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vl53l8cx_send_xtalk_data
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vl53l8cx_send_offset_data
</UL>

<P><STRONG><a name="[db]"></a>VL53L8CX_WaitMs</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, platform.o(.text.VL53L8CX_WaitMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53L8CX_WaitMs
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_stop_ranging
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_dci_read_data
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_start_ranging
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_set_power_mode
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_dci_write_data
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vl53l8cx_send_xtalk_data
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vl53l8cx_send_offset_data
</UL>

<P><STRONG><a name="[cf]"></a>VL53L8CX_WrByte</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, platform.o(.text.VL53L8CX_WrByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = VL53L8CX_WrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_stop_ranging
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_start_ranging
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_set_power_mode
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_get_power_mode
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_set_i2c_address
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_ReadID
</UL>

<P><STRONG><a name="[d9]"></a>VL53L8CX_WrMulti</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, platform.o(.text.VL53L8CX_WrMulti))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VL53L8CX_WrMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_dci_read_data
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_start_ranging
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_dci_write_data
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vl53l8cx_send_xtalk_data
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vl53l8cx_send_offset_data
</UL>

<P><STRONG><a name="[60]"></a>fputc</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, custom.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fputc &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf6.o(i.__0printf$6)
</UL>
<P><STRONG><a name="[58]"></a>main</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = main &rArr; MX_TOF_Init &rArr; BSP_COM_Init &rArr; MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCC_GetPCLK3Freq &rArr; HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TOF_Process
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TOF_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ICACHE_Init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[cb]"></a>vl53l8cx_check_data_ready</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, vl53l8cx_api.o(.text.vl53l8cx_check_data_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vl53l8cx_check_data_ready &rArr; VL53L8CX_RdMulti
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_RdMulti
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_GetDistance
</UL>

<P><STRONG><a name="[dd]"></a>vl53l8cx_dci_read_data</STRONG> (Thumb, 338 bytes, Stack size 48 bytes, vl53l8cx_api.o(.text.vl53l8cx_dci_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = vl53l8cx_dci_read_data &rArr; VL53L8CX_SwapBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_SwapBuffer
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_WrMulti
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_RdMulti
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_WaitMs
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_set_ranging_mode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_set_integration_time_ms
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_dci_replace_data
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_set_ranging_frequency_hz
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_set_resolution
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_get_resolution
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_start_ranging
</UL>

<P><STRONG><a name="[de]"></a>vl53l8cx_dci_replace_data</STRONG> (Thumb, 62 bytes, Stack size 40 bytes, vl53l8cx_api.o(.text.vl53l8cx_dci_replace_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = vl53l8cx_dci_replace_data &rArr; vl53l8cx_dci_write_data &rArr; VL53L8CX_SwapBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_dci_read_data
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_dci_write_data
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_set_detection_thresholds_enable
</UL>

<P><STRONG><a name="[e0]"></a>vl53l8cx_dci_write_data</STRONG> (Thumb, 296 bytes, Stack size 56 bytes, vl53l8cx_api.o(.text.vl53l8cx_dci_write_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = vl53l8cx_dci_write_data &rArr; VL53L8CX_SwapBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_SwapBuffer
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_WrMulti
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_RdMulti
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_WaitMs
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_set_detection_thresholds
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_set_ranging_mode
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_set_integration_time_ms
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_dci_replace_data
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_set_ranging_frequency_hz
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_set_resolution
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_start_ranging
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_init
</UL>

<P><STRONG><a name="[cd]"></a>vl53l8cx_get_power_mode</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, vl53l8cx_api.o(.text.vl53l8cx_get_power_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vl53l8cx_get_power_mode &rArr; VL53L8CX_WrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_RdByte
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_WrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_GetPowerMode
</UL>

<P><STRONG><a name="[cc]"></a>vl53l8cx_get_ranging_data</STRONG> (Thumb, 1622 bytes, Stack size 80 bytes, vl53l8cx_api.o(.text.vl53l8cx_get_ranging_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vl53l8cx_get_ranging_data &rArr; VL53L8CX_SwapBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_SwapBuffer
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_RdMulti
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_GetDistance
</UL>

<P><STRONG><a name="[c5]"></a>vl53l8cx_get_resolution</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, vl53l8cx_api.o(.text.vl53l8cx_get_resolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = vl53l8cx_get_resolution &rArr; vl53l8cx_dci_read_data &rArr; VL53L8CX_SwapBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_dci_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_GetDistance
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_ConfigIT
</UL>

<P><STRONG><a name="[ce]"></a>vl53l8cx_init</STRONG> (Thumb, 1548 bytes, Stack size 48 bytes, vl53l8cx_api.o(.text.vl53l8cx_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = vl53l8cx_init &rArr; _vl53l8cx_send_offset_data &rArr; VL53L8CX_SwapBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_dci_write_data
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_SwapBuffer
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_WrMulti
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_RdMulti
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_WaitMs
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_RdByte
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_WrByte
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vl53l8cx_send_xtalk_data
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vl53l8cx_send_offset_data
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_set_power_mode
</UL>

<P><STRONG><a name="[c6]"></a>vl53l8cx_set_detection_thresholds</STRONG> (Thumb, 1658 bytes, Stack size 32 bytes, vl53l8cx_plugin_detection_thresholds.o(.text.vl53l8cx_set_detection_thresholds))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = vl53l8cx_set_detection_thresholds &rArr; vl53l8cx_dci_write_data &rArr; VL53L8CX_SwapBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_dci_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_ConfigIT
</UL>

<P><STRONG><a name="[c4]"></a>vl53l8cx_set_detection_thresholds_enable</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, vl53l8cx_plugin_detection_thresholds.o(.text.vl53l8cx_set_detection_thresholds_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = vl53l8cx_set_detection_thresholds_enable &rArr; vl53l8cx_dci_replace_data &rArr; vl53l8cx_dci_write_data &rArr; VL53L8CX_SwapBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_dci_replace_data
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_ConfigIT
</UL>

<P><STRONG><a name="[d1]"></a>vl53l8cx_set_i2c_address</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, vl53l8cx_api.o(.text.vl53l8cx_set_i2c_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vl53l8cx_set_i2c_address &rArr; VL53L8CX_WrByte
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_WrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_SetAddress
</UL>

<P><STRONG><a name="[c9]"></a>vl53l8cx_set_integration_time_ms</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, vl53l8cx_api.o(.text.vl53l8cx_set_integration_time_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vl53l8cx_set_integration_time_ms &rArr; vl53l8cx_dci_write_data &rArr; VL53L8CX_SwapBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_dci_read_data
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_dci_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_ConfigProfile
</UL>

<P><STRONG><a name="[d2]"></a>vl53l8cx_set_power_mode</STRONG> (Thumb, 504 bytes, Stack size 32 bytes, vl53l8cx_api.o(.text.vl53l8cx_set_power_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = vl53l8cx_set_power_mode &rArr; vl53l8cx_init &rArr; _vl53l8cx_send_offset_data &rArr; VL53L8CX_SwapBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_RdMulti
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_WaitMs
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_RdByte
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_WrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_SetPowerMode
</UL>

<P><STRONG><a name="[ca]"></a>vl53l8cx_set_ranging_frequency_hz</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, vl53l8cx_api.o(.text.vl53l8cx_set_ranging_frequency_hz))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vl53l8cx_set_ranging_frequency_hz &rArr; vl53l8cx_dci_write_data &rArr; VL53L8CX_SwapBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_dci_read_data
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_dci_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_ConfigProfile
</UL>

<P><STRONG><a name="[c8]"></a>vl53l8cx_set_ranging_mode</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, vl53l8cx_api.o(.text.vl53l8cx_set_ranging_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vl53l8cx_set_ranging_mode &rArr; vl53l8cx_dci_write_data &rArr; VL53L8CX_SwapBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_dci_read_data
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_dci_write_data
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_ConfigProfile
</UL>

<P><STRONG><a name="[c7]"></a>vl53l8cx_set_resolution</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, vl53l8cx_api.o(.text.vl53l8cx_set_resolution))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = vl53l8cx_set_resolution &rArr; _vl53l8cx_send_offset_data &rArr; VL53L8CX_SwapBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_dci_read_data
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_dci_write_data
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vl53l8cx_send_xtalk_data
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vl53l8cx_send_offset_data
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_ConfigProfile
</UL>

<P><STRONG><a name="[d3]"></a>vl53l8cx_start_ranging</STRONG> (Thumb, 922 bytes, Stack size 136 bytes, vl53l8cx_api.o(.text.vl53l8cx_start_ranging))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = vl53l8cx_start_ranging &rArr; vl53l8cx_dci_write_data &rArr; VL53L8CX_SwapBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_dci_read_data
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_dci_write_data
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_WrMulti
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_RdMulti
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_WaitMs
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_WrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_Start
</UL>

<P><STRONG><a name="[d4]"></a>vl53l8cx_stop_ranging</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, vl53l8cx_api.o(.text.vl53l8cx_stop_ranging))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vl53l8cx_stop_ranging &rArr; VL53L8CX_WaitMs
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_RdMulti
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_WaitMs
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_RdByte
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_WrByte
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_Stop
</UL>

<P><STRONG><a name="[e1]"></a>__0printf$6</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf6.o(i.__0printf$6), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[f5]"></a>__1printf$6</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0printf$6), UNUSED)

<P><STRONG><a name="[b4]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf6.o(i.__0printf$6))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TOF_Process
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TOF_Init
</UL>

<P><STRONG><a name="[f6]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[f7]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[f8]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[bd]"></a>putchar</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, putchar.o(i.putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = putchar &rArr; fputc &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TOF_Process
</UL>

<P><STRONG><a name="[b5]"></a>puts</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, puts.o(i.puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = puts &rArr; fputc &rArr; HAL_UART_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TOF_Process
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TOF_Init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[d5]"></a>_vl53l8cx_send_offset_data</STRONG> (Thumb, 1392 bytes, Stack size 136 bytes, vl53l8cx_api.o(.text._vl53l8cx_send_offset_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _vl53l8cx_send_offset_data &rArr; VL53L8CX_SwapBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_SwapBuffer
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_WrMulti
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_RdMulti
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_WaitMs
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_set_resolution
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_init
</UL>

<P><STRONG><a name="[dc]"></a>_vl53l8cx_send_xtalk_data</STRONG> (Thumb, 776 bytes, Stack size 72 bytes, vl53l8cx_api.o(.text._vl53l8cx_send_xtalk_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _vl53l8cx_send_xtalk_data &rArr; VL53L8CX_SwapBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_SwapBuffer
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_WrMulti
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_RdMulti
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VL53L8CX_WaitMs
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_set_resolution
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vl53l8cx_init
</UL>

<P><STRONG><a name="[90]"></a>I2C_IsErrorOccurred</STRONG> (Thumb, 352 bytes, Stack size 16 bytes, stm32h5xx_hal_i2c.o(.text.I2C_IsErrorOccurred))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPFlagUntilTimeout
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXISFlagUntilTimeout
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[8e]"></a>I2C_WaitOnTXISFlagUntilTimeout</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, stm32h5xx_hal_i2c.o(.text.I2C_WaitOnTXISFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnTXISFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[8f]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, stm32h5xx_hal_i2c.o(.text.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_WaitOnFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[91]"></a>I2C_WaitOnSTOPFlagUntilTimeout</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32h5xx_hal_i2c.o(.text.I2C_WaitOnSTOPFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnSTOPFlagUntilTimeout &rArr; I2C_IsErrorOccurred
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsErrorOccurred
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[a2]"></a>RCCEx_PLL2_Config</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, stm32h5xx_hal_rcc_ex.o(.text.RCCEx_PLL2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCCEx_PLL2_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[e2]"></a>_printf_core</STRONG> (Thumb, 748 bytes, Stack size 96 bytes, printf6.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$6
</UL>

<P><STRONG><a name="[e5]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf6.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e3]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf6.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
